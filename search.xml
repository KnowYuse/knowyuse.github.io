<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2021/10/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle学习笔记</title>
    <url>/2021/11/03/Gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-配置Gradle"><a href="#1-配置Gradle" class="headerlink" title="1 配置Gradle"></a>1 配置Gradle</h2><h2 id="2-Gradle语法"><a href="#2-Gradle语法" class="headerlink" title="2 Gradle语法"></a>2 Gradle语法</h2>]]></content>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2021/11/04/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus学习笔记</title>
    <url>/2021/11/04/Mybatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://mp.baomidou.com/guide/">官方文档</a></p>
]]></content>
      <tags>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/2021/10/25/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-内存模型"><a href="#1-内存模型" class="headerlink" title="1. 内存模型"></a>1. 内存模型</h2><p>通过<code>info memory</code>命令查看内存的使用情况。</p>
<ul>
<li>used_memory: 从Redis角度使用了多少内存，即Redis分配器分配的内存总量（单位是字节），包括使用的虚拟内存（即swap）；</li>
<li>used_memory_rss: 从操作系统角度实际使用量，即Redis进程占据操作系统的内存（单位是字节），包括进程运行本身需要的内存、内存碎片等，不包括虚拟内存。一般情况下used_memory_rss都要比used_memory大，因为Redis频繁删除读写等操作使得内存碎片较多，而虚拟内存的使用一般是非极端情况下是不怎么使用的；</li>
<li>mem_fragmentation_ratio: 即内存碎片比率，该值是used_memory_rss / used_memory的比值；mem_fragmentation_ratio一般大于1，且该值越大，内存碎片比例越大。如果mem_fragmentation_ratio&lt;1，说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点、增加Redis服务器的内存、优化应用等。一般来说，mem_fragmentation_ratio在1.03左右是比较健康的状态（对于jemalloc来说）；</li>
<li>mem_allocator: 即Redis使用的内存分配器，一般默认是jemalloc。</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号开发学习笔记</title>
    <url>/2021/11/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-配置微信公众号"><a href="#1-配置微信公众号" class="headerlink" title="1 配置微信公众号"></a>1 配置微信公众号</h2>]]></content>
  </entry>
  <entry>
    <title>技术好文</title>
    <url>/2021/10/25/%E6%8A%80%E6%9C%AF%E5%A5%BD%E6%96%87/</url>
    <content><![CDATA[<h2 id="1-中间件"><a href="#1-中间件" class="headerlink" title="1. 中间件"></a>1. 中间件</h2><ul>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/k8sA6XPrp80JiNbuwKaVfg">消息队列背后的设计思想</a></li>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/XslSlWWD1oSZMOz35sUTVA">浅谈 RocketMQ、Kafka、Pulsar 的事务消息</a></li>
<li><a href="https://mp.weixin.qq.com/s/-MXA4T-ei_U5ewXUNZ0QdQ">分布式消息队列</a></li>
<li><a href="https://mp.weixin.qq.com/s/CWjPigYjnREPXTiIRXI6MA">MongoDB 基础浅谈</a></li>
<li><a href="https://mp.weixin.qq.com/s/k8agEub4qmhm3kX_TpETrA">这篇Redis文章，图灵看了都说好</a></li>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w">认识 MySQL 和 Redis 的数据一致性问题</a></li>
</ul>
<h2 id="2-系统架构相关"><a href="#2-系统架构相关" class="headerlink" title="2.系统架构相关"></a>2.系统架构相关</h2><ul>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/jLkuNy-M72vIVuFUFmF2NQ">弹性伸缩</a></li>
<li><a href="https://mp.weixin.qq.com/s/mUF0AEncu3T2yDqKyt-0Ow">Kubernetes 入门&amp;进阶实战</a></li>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/STdtEcqTkQvtiSZnWpFevA">异地多活</a></li>
<li><a href="https://mp.weixin.qq.com/s/TTn3YNwKKWn5IS8F6HJHIg">高并发系统建设经验总结</a></li>
</ul>
<h2 id="3-编程语言"><a href="#3-编程语言" class="headerlink" title="3. 编程语言"></a>3. 编程语言</h2><ul>
<li><img align="left" src="https://img.shields.io/badge/read-finished-green"/><a href="https://mp.weixin.qq.com/s/IBTq0EspL5tlLupPDwcbEQ">原来 Lamda 表达式是这样写的</a></li>
<li><a href="https://mp.weixin.qq.com/s/q6BfOINeqgm5nffrHu4kQA">从根本上了解异步编程体系</a></li>
</ul>
<h2 id="4-网络相关"><a href="#4-网络相关" class="headerlink" title="4. 网络相关"></a>4. 网络相关</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/du7mFM1FbbR2m2pz8c7rdA">破玩意 | 用 HTTPS 传纸条</a></li>
<li><a href="https://mp.weixin.qq.com/s/2z7NaoYEgbZ_hDxbcbMdYw">叮咚 | HTTPS 的分支和主干</a></li>
<li><a href="https://mp.weixin.qq.com/s/k7hI4PTtZxB5mNciCU5Z3A">今天我抓了个 HTTPS 的包</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/428461187">Linux系统TCP内核参数优化总结</a></li>
</ul>
<h2 id="5-操作系统"><a href="#5-操作系统" class="headerlink" title="5. 操作系统"></a>5. 操作系统</h2>]]></content>
  </entry>
  <entry>
    <title>消息队列学习笔记</title>
    <url>/2021/10/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1 基础概念"></a>1 基础概念</h2><h3 id="1-1-什么是Exactly-once-精确一次-语义"><a href="#1-1-什么是Exactly-once-精确一次-语义" class="headerlink" title="1.1 什么是Exactly-once(精确一次)语义"></a>1.1 什么是Exactly-once(精确一次)语义</h3><p>在分布式系统中，任何节点都有可能出现异常甚至宕机。在 消息队列中也一样，当 Producer 在生产消息时，可能会发生 Broker 宕机不可用，或者网络突然中断等异常情况。根据在发生异常时 Producer 处理消息的方式，系统可以具备以下三种消息语义。</p>
<h4 id="1-1-1-At-least-once-至少一次-语义"><a href="#1-1-1-At-least-once-至少一次-语义" class="headerlink" title="1.1.1 At-least-once(至少一次)语义"></a>1.1.1 At-least-once(至少一次)语义</h4><p>Producer 通过接收 Broker 的 ACK(消息确认)通知来确保消息成功写入 Topic。然而，当 Producer 接收 ACK 通知超时，或者收到 Broker 出错信息时，会尝试重新发送消息。如果 Broker 正好在成功把消息写入到 Topic，但还没有给 Producer 发送 ACK 时宕机，Producer 重新发送的消息会被再次写入到 Topic，最终导致消息被重复分发至 Consumer。即：<strong>消息不会丢失，但有可能被重复发送</strong>。</p>
<h4 id="1-1-2-At-most-once-最多一次-语义"><a href="#1-1-2-At-most-once-最多一次-语义" class="headerlink" title="1.1.2 At-most-once(最多一次)语义"></a>1.1.2 At-most-once(最多一次)语义</h4><p>当 Producer 在接收 ACK 超时，或者收到 Broker 出错信息时不重发消息，那就有可能导致这条消息丢失，没有写入到 Topic 中，也不会被 Consumer 消费到。在某些场景下，为了避免发生重复消费，我们可以容许消息丢失的发生。即：<strong>消息可能会丢失，但绝不会被重复发送</strong>。</p>
<h4 id="1-1-3-Exactly-once-精确一次-语义"><a href="#1-1-3-Exactly-once-精确一次-语义" class="headerlink" title="1.1.3 Exactly-once(精确一次)语义"></a>1.1.3 Exactly-once(精确一次)语义</h4><p><strong>Exactly-once 语义保证了即使 Producer 多次发送同一条消息到服务端，服务端也仅仅会记录一次。</strong> Exactly-once 语义是最可靠的，同时也是最难理解的。Exactly-once 语义需要消息队列服务端，消息生产端和消费端应用三者的协同才能实现。比如，当消费端应用成功消费并且 ACK 了一条消息之后，又把消费位点回滚到之前的一个消息 ID，那么从那个消息 ID 往后的所有消息都会被消费端应用重新消费到。即：<strong>消息不会丢失，也不会被重复发送</strong>。</p>
<h2 id="2-Kafka"><a href="#2-Kafka" class="headerlink" title="2 Kafka"></a>2 Kafka</h2><p>Apache Kafka 是由 Apache 软件基金会开发的一个开源消息系统项目，由 Scala 写成。Kafka 最初是由 LinkedIn 开发，并于 2011 年初开源。2012 年 10 月从 Apache Incubator 毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。Kafka 是一个分布式的、分区的、多复本的日志提交服务。它通过一种独一无二的设计提供了一个消息系统的功能，其整体架构图如下所示。</p>
<div align=center><img src="https://ftp.knowyuse.top/j3gficicyOvatVXIXkwUJKf2Aeicx3wiaJpM2R2zibAd9FvMBUmzAkCLINyycgrTUw12Tx7P3umdxQvNePnFr50VicJg.jpg" height=400 width=600></div>
<center style="color:#000;">kafka整体架构图</center>

<h2 id="3-RocketMQ"><a href="#3-RocketMQ" class="headerlink" title="3 RocketMQ"></a>3 RocketMQ</h2><p>Apache RocketMQ 是一个分布式消息和流媒体平台，具有低延迟、强一致、高性能和可靠性、万亿级容量和灵活的可扩展性。它有借鉴 Kafka 的设计思想，但不是 kafka 的拷贝，其整体架构图如下所示。</p>
<div align=center><img src="https://ftp.knowyuse.top/j3gficicyOvatVXIXkwUJKf2Aeicx3wiaJpMHIwKhrwaN1wyPdSgh0HAuYRzYPf8zWmOicWu8V6C1DG0k395ribHtydQ.jpg" height=400 width=600></div>
<center style="color:#000;">RocketMQ架构图</center>

<h2 id="4-Pulsar"><a href="#4-Pulsar" class="headerlink" title="4 Pulsar"></a>4 Pulsar</h2><p>Apache Pulsar 是 Apache 软件基金会顶级项目，是下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体，采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性，被看作是云原生时代实时消息流传输、存储和计算最佳解决方案，其整体架构图如下所示。</p>
<div align=center><img src="https://ftp.knowyuse.top/j3gficicyOvatVXIXkwUJKf2Aeicx3wiaJpMFjJttO64Gycvdru0Fniaicw8ey5j16gnWUiczfcibvgxWoTowlSt9WwVmQ.jpg" height=400 width=600></div>
<center style="color:#000;">Pulsar架构图</center>

<h2 id="5-消息队列背后的设计思想"><a href="#5-消息队列背后的设计思想" class="headerlink" title="5 消息队列背后的设计思想"></a>5 消息队列背后的设计思想</h2><p><a href="https://mp.weixin.qq.com/s/k8sA6XPrp80JiNbuwKaVfg">参考链接</a></p>
<h2 id="6-浅谈-RocketMQ、Kafka、Pulsar-的事务消息"><a href="#6-浅谈-RocketMQ、Kafka、Pulsar-的事务消息" class="headerlink" title="6 浅谈 RocketMQ、Kafka、Pulsar 的事务消息"></a>6 浅谈 RocketMQ、Kafka、Pulsar 的事务消息</h2><p><a href="https://mp.weixin.qq.com/s/XslSlWWD1oSZMOz35sUTVA">参考链接</a></p>
<h3 id="6-1-分布式事务"><a href="#6-1-分布式事务" class="headerlink" title="6.1 分布式事务"></a>6.1 分布式事务</h3><p>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。分布式事务通常用于在分布式系统中保证不同节点之间的数据一致性。</p>
<p>解决方案一般有以下几种：</p>
<ul>
<li>XA(2PC/3PC)</li>
<li>TCC</li>
<li>消息事务</li>
</ul>
<p>所谓的消息事务就是基于消息队列的两阶段提交，本质上是对消息队列的一种特殊利用，它是将本地事务和发消息放在了一个分布式事务里，保证要么本地操作成功成功并且对外发消息成功，要么两者都失败。</p>
<p>基于消息队列的两阶段提交往往用在高并发场景下，将一个分布式事务拆成一个消息事务（A 系统的本地操作+发消息）+B 系统的本地操作，其中 B 系统的操作由消息驱动，只要消息事务成功，那么 A 操作一定成功，消息也一定发出来了，这时候 B 会收到消息去执行本地操作，如果本地操作失败，消息会重投，直到 B 操作成功，这样就变相地实现了 A 与 B 的分布式事务。原理如下：</p>
<div align=center><img src="https://ftp.knowyuse.top/j3gficicyOvatVXIXkwUJKf2Aeicx3wiaJpMbHbQL09Tml7licJFibG4EmyufWMMrL5I1K8ibGKQLMMcJv38XJyhWdj9g.jpg" height=400 width=600></div>
<center style="color:#000;">消息事务示意图</center>

<p>虽然上面的方案能够完成 A 和 B 的操作，但是 A 和 B 并不是强一致的，而是**最终一致(Eventually consistent)**的。</p>
<h3 id="6-2-RocketMQ-的事务消息"><a href="#6-2-RocketMQ-的事务消息" class="headerlink" title="6.2 RocketMQ 的事务消息"></a>6.2 RocketMQ 的事务消息</h3><p>RocketMQ 采用了 2PC 的思想来实现了提交事务消息，同时增加一个补偿逻辑来处理二阶段超时或者失败的消息，流程如下图所示：</p>
<div align=center><img src="https://ftp.knowyuse.top/1154e434-bf79-4d76-99f8-9ba3edf5d077.jpg" height=400 width=600></div>
<center style="color:#000;">RocketMQ事务消息</center>

<h3 id="6-3-Kafka-的事务消息"><a href="#6-3-Kafka-的事务消息" class="headerlink" title="6.3 Kafka 的事务消息"></a>6.3 Kafka 的事务消息</h3><p>Kafka 的事务基本上是配合其幂等机制来实现 Exactly-once语义的。</p>
<h3 id="6-4-Pulsar-的事务消息"><a href="#6-4-Pulsar-的事务消息" class="headerlink" title="6.4 Pulsar 的事务消息"></a>6.4 Pulsar 的事务消息</h3><p>Pulsar 这里提供的事务区别于 RocketMQ 中 2PC 那种事务的实现方式，没有本地事务回查的机制，更类似于 Kafka 的事务实现机制。Apache Pulsar 中的事务主要用来保证类似 Pulsar Functions 这种流计算场景中 Exactly-once 语义的实现。</p>
<h3 id="6-5-结论"><a href="#6-5-结论" class="headerlink" title="6.5 结论"></a>6.5 结论</h3><p>RocketMQ 和 Kafka/Pulsar 的事务消息实用的场景是不一样的。</p>
<p>RocketMQ 中的事务，它解决的问题是，确保执行本地事务和发消息这两个操作，要么都成功，要么都失败。并且 RocketMQ 增加了一个事务反查的机制，来尽量提高事务执行的成功率和数据一致性。</p>
<p>Kafka 中的事务，它解决的问题是，确保在一个事务中发送的多条消息，要么都成功，要么都失败。（这里面的多条消息不一定要在同一个主题和分区中，可以是发往多个主题和分区的消息）当然也可以在 kafka 事务执行过程中开启本地事务来实现类似 RocketMQ 事务消息的效果，但是 Kafka 是没有事务消息反查机制的，它是直接抛出异常的，用户可以根据异常来实现自己的重试等方法保证事务正常运行。</p>
<p>它们的共同点就是：都是通过两阶段提交来实现事务的，事务消息都保存在单独的主题上。不同的地方就是 RocketMQ 是通过“半消息”来实现的，kafka 是直接将消息发送给对应的 topic，通过客户端来过滤实现的。而且它们两个使用的场景区别是非常之大的，RockteMQ 主要解决的是基于本地事务和消息的数据一致性，而 Kafka 的事务则是用于实现它的 Exactly-once 机制，应用于实时流计算的场景中。</p>
<p>Pulsar 的事务消息和 Kafka 应用场景和语义类似，只是由于底层实现机制有差别，在一些细节上有区别。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>认识 MySQL 和 Redis 的数据一致性问题</title>
    <url>/2021/11/09/%E8%AE%A4%E8%AF%86-MySQL-%E5%92%8C-Redis-%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w">原文链接</a><br><img src="https://ftp.knowyuse.top/c82cd020-c975-49bf-86de-a9f8d03cc2b3.jpg"></p>
<ul>
<li>针对读写缓存：<img src="https://ftp.knowyuse.top/daef082d-6008-447b-96b4-e0f360c5d68d.jpg"></li>
<li>针对只读缓存：<img src="https://ftp.knowyuse.top/2e87dd0a-f5c6-4304-9553-2ec9f9bacbec.jpg"></li>
</ul>
<p><strong>较为通用的一致性策略拟定：</strong></p>
<p>在并发场景下，使用 “更新数据库 + 更新缓存” 需要用分布式锁保证缓存和数据一致性，且可能存在”缓存资源浪费“和”机器性能浪费“的情况；一般推荐使用 “更新数据库 + 删除缓存” 的方案。如果根据需要，热点数据较多，可以使用 “更新数据库 + 更新缓存” 策略。</p>
<p>在 “更新数据库 + 删除缓存” 的方案中，推荐使用推荐用 “先更新数据库，再删除缓存” 策略，因为先删除缓存可能会导致大量请求落到数据库，而且延迟双删的时间很难评估。在 “先更新数据库，再删除缓存” 策略中，可以使用“消息队列+重试机制” 的方案保证缓存的删除。并通过 “订阅 binlog” 进行缓存比对，加上一层保障。</p>
<p>此外，需要通过初始化缓存预热、多数据源触发、延迟消息比对等策略进行辅助和补偿。【多种数据更新触发源：定时任务扫描，业务系统 MQ、binlog 变更 MQ，相互之间作为互补来保证数据不会漏更新】</p>
<p><strong>需要注意的其他问题</strong></p>
<ul>
<li>k-v 大小的合理设置<ul>
<li>Redis key 大小设计：由于网络的一次传输 MTU 最大为 1500 字节，所以为了保证高效的性能，建议单个 k-v 大小不超过 1KB，一次网络传输就能完成，避免多次网络交互；k-v 是越小性能越好Redis </li>
<li>热 key：（1） 当业务遇到单个读热 key，通过增加副本来提高读能力或是用 hashtag 把 key 存多份在多个分片中；（2）当业务遇到单个写热 key，需业务拆分这个 key 的功能，属于设计不合理- 当业务遇到热分片，即多个热 key 在同一个分片上导致单分片 cpu 高，可通过 hashtag 方式打散</li>
</ul>
</li>
<li>避免其他问题导致缓存服务器崩溃，进而简直导致数据一致性策略失效<img src="https://ftp.knowyuse.top/2edc651c-4f93-4152-8e16-b7bb5dc9c5bb.jpg"></li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
